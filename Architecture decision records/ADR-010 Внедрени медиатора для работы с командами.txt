Дата:			09.04.2024
Статус:		Принято
Контекст:		Наша система требует надежного решения для асинхронной обработки команд и задач между компонентами и сервисами. Такое решение должно обеспечить высокую доступность, гарантированную доставку команд и гибкость в управлении потоками данных.
Решение:		Выбор пал на RabbitMQ в качестве промежуточного программного обеспечения для очередей команд, основываясь на следующих критериях:
					1. Надежность и отказоустойчивость: RabbitMQ обеспечивает гарантированную доставку команд, поддерживает персистентность данных и позволяет настраивать поведение в случае сбоев или перегрузок.
					2. Гибкость маршрутизации: RabbitMQ предлагает мощные возможности для настройки маршрутизации косанд, включая обменники (exchanges), очереди (queues) и ключи маршрутизации (routing keys), что позволяет точно настраивать логику доставки команд.
					3. Масштабируемость: Система может быть масштабирована как вертикально, так и горизонтально, обеспечивая увеличение производительности путем добавления большего количества узлов кластера.
					4. Поддержка множества протоколов: RabbitMQ поддерживает различные протоколы связи, включая AMQP, MQTT, STOMP, что делает его гибким решением для интеграции с разнообразными системами и приложениями.
Последствия:	1. Требования к обслуживанию: RabbitMQ требует регулярного мониторинга и управления, включая настройку очередей, обработку мертвых писем и оптимизацию производительности.
				2. Кривая обучения: Для полноценной работы с RabbitMQ необходимо изучить концепции очередей, обменников, маршрутизации и другие аспекты, что потребует времени и усилий.
				3. Зависимость от инфраструктуры: Внедрение RabbitMQ создает дополнительную зависимость в архитектуре системы, что необходимо учитывать при планировании отказоустойчивости и масштабирования.
Альтернативы, которые были рассмотрены:
				1. Apache Kafka: Ориентирован на потоковую обработку данных и может быть переизбыточным для задач, строго связанных с очередями сообщений.
				2. Amazon SQS: Управляемый сервис очередей сообщений, предлагает простоту и масштабируемость, но может не обеспечивать такую же степень контроля и гибкости, особенно в гибридных или локальных средах.
				